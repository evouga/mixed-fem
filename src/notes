Measure "actual gradient" for output
Get a "standard" ipc working
Check for convergence - test "actual" newton decrement , check out chenfanfu PD collision
Set up unit tests 

Add 2D mass-spring (maybe)

Drop smaller cube on larger cube on platform

Drop heavy cube on trampoline

Sequence of cubes on trampoline (check rigid-ipc for references)`


{
  "optimizer": "mixed-sqp",
  "time_integrator": "bdf1",
  "linear_solver": "eigen-llt",
  "linesearch": backtracking-cubic-ccd
  "timestep": 0.034,
  "body_force": [0.0, -9.8, 0.0],
  "print_stats": true,
  "print_timing": true,
  "max_iterations": 5,
  "max_linesearch_iterations": 20,
  "kappa": 10
  "objects": [
  {
    "shit"
  }],
  "mixed_variables": 
    "stretch",
    "collision"
  ]
  "enable_collision":true,


  // BC are per object
  // Material model, params are per ELEMENT

}


---
TODO - cmake openmp
---



1. SQP general optimizer used by both newtons & mixed
  - right now assume displacement is "primal"
  - take in vector of shared_ptrs as constructor
2. Variable factory
  - displacement
  - stretch
  - collision
  - bending
3. Linesearch factory -- dont do for now, only one linesearch approach :/ 
4. Remove mass matrix from displacement. Use templated call to mass_matrix() to select which version one wants
5. Boundary condition factory
6. ADMM optimizer 
7. Uzawa iteration







