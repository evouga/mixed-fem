#include "point_edge_frame.h"

using namespace mfem;
using namespace Eigen;

template<int DIM>
double PointEdgeFrame<DIM>::distance(const VectorXd& x) {
  using VecD = Vector<double,DIM>;
  const VecD& a = x.segment<DIM>(DIM*E_(0));
  const VecD& b = x.segment<DIM>(DIM*E_(1));
  const VecD& p = x.segment<DIM>(DIM*E_(2));
  VecD v = b - a;
  VecD w = p - a;
  double c = w.dot(v) / v.dot(v);
  return (p - (a + c*v)).norm();
}

template<>
VectorXd PointEdgeFrame<2>::gradient(const VectorXd& x) {
  Eigen::Vector6d q;
  q << x(2*E_(0)), x(2*E_(0) + 1),
       x(2*E_(1)), x(2*E_(1) + 1),
       x(2*E_(2)), x(2*E_(2) + 1);
  Vector6d g;
  double b_g_tmp;
  double g_tmp;
  double t16;
  double t17;
  double t18;
  double t19;
  double t2;
  double t20;
  double t21;
  double t24;
  double t25;
  double t26;
  double t27;
  double t29;
  double t3;
  double t30;
  double t31;
  double t32;
  double t39;
  double t42;
  double t43;
  double t44;
  double t49;
  /* GRADIENT */
  /*     G = GRADIENT(IN1) */
  /*     This function was generated by the Symbolic Math Toolbox version 9.1.
   */
  /*     16-Aug-2022 17:17:26 */
  t2 = q[0] * 2.0;
  t3 = q[1] * 2.0;
  t16 = q[0] + -q[2];
  t17 = q[0] + -q[4];
  t18 = q[1] + -q[3];
  t19 = q[1] + -q[5];
  t20 = (q[2] + q[4]) + -t2;
  t21 = (q[3] + q[5]) + -t3;
  t2 += -(q[2] * 2.0);
  t3 += -(q[3] * 2.0);
  t24 = t16 * t16;
  t25 = t18 * t18;
  t26 = t16 * t17;
  t27 = t18 * t19;
  t31 = t26 + t27;
  t29 = 1.0 / (t24 + t25);
  t30 = t29 * t29;
  t32 = t29 * t31;
  t42 = t16 * t2 * t30 * t31;
  t43 = t18 * t2 * t30 * t31;
  t44 = t16 * t3 * t30 * t31;
  t2 = t18 * t3 * t30 * t31;
  t3 = (q[4] + -q[0]) + t16 * t32;
  t31 = (q[5] + -q[1]) + t18 * t32;
  t30 = fabs(t3);
  t39 = fabs(t31);
  if (t3 < 0.0) {
    t3 = -1.0;
  } else if (t3 > 0.0) {
    t3 = 1.0;
  } else if (t3 == 0.0) {
    t3 = 0.0;
  }
  if (t31 < 0.0) {
    t31 = -1.0;
  } else if (t31 > 0.0) {
    t31 = 1.0;
  } else if (t31 == 0.0) {
    t31 = 0.0;
  }
  t49 = 1.0 / sqrt(t30 * t30 + t39 * t39);
  g_tmp = t39 * t31;
  b_g_tmp = t30 * t3;
  g[0] = t49 *
         (b_g_tmp * (((-t32 + t42) + t16 * t20 * t29) + 1.0) * 2.0 +
          g_tmp * (t43 + t18 * t20 * t29) * 2.0) *
         -0.5;
  g[1] = t49 *
         (g_tmp * (((-t32 + t2) + t18 * t21 * t29) + 1.0) * 2.0 +
          b_g_tmp * (t44 + t16 * t21 * t29) * 2.0) *
         -0.5;
  g[2] = t49 *
         (b_g_tmp * ((t32 - t42) + t26 * t29) * 2.0 -
          g_tmp * (t43 - t17 * t18 * t29) * 2.0) *
         -0.5;
  g[3] = t49 *
         (g_tmp * ((t32 - t2) + t27 * t29) * 2.0 -
          b_g_tmp * (t44 - t16 * t19 * t29) * 2.0) *
         -0.5;
  t2 = t16 * t18 * t29;
  g[4] =
      t49 * (b_g_tmp * (t24 * t29 - 1.0) * 2.0 + t2 * t39 * t31 * 2.0) * -0.5;
  g[5] = t49 * (g_tmp * (t25 * t29 - 1.0) * 2.0 + t2 * t30 * t3 * 2.0) * -0.5;
  return g;
}

template<>
MatrixXd PointEdgeFrame<2>::hessian(const VectorXd& x) {
  Eigen::Vector6d q;
  q << x(2*E_(0)), x(2*E_(0) + 1),
       x(2*E_(1)), x(2*E_(1) + 1),
       x(2*E_(2)), x(2*E_(2) + 1);
  //double q1 = x(2*E_(0));
  //double q2 = x(2*E_(0) + 1);
  //double q3 = x(2*E_(1));
  //double q4 = x(2*E_(1) + 1);
  //double q5 = x(2*E_(2));
  //double q6 = x(2*E_(2) + 1);

  double H[36];
  double t101;
  double t102;
  double t103;
  double t104;
  double t107;
  double t108;
  double t109;
  double t110;
  double t121;
  double t122;
  double t127;
  double t128;
  double t129;
  double t130;
  double t135;
  double t136;
  double t139;
  double t140;
  double t141;
  double t142;
  double t143;
  double t144;
  double t145;
  double t146;
  double t150;
  double t151;
  double t152;
  double t153;
  double t154;
  double t155;
  double t156;
  double t157;
  double t158;
  double t16;
  double t162;
  double t163;
  double t17;
  double t172;
  double t173;
  double t176;
  double t177;
  double t178;
  double t18;
  double t186;
  double t186_tmp;
  double t187_tmp;
  double t19;
  double t2;
  double t20;
  double t21;
  double t22;
  double t23;
  double t24;
  double t25;
  double t250;
  double t251;
  double t26;
  double t27;
  double t28;
  double t286;
  double t287;
  double t288;
  double t289;
  double t29;
  double t3;
  double t31;
  double t32;
  double t33;
  double t330;
  double t34;
  double t35;
  double t351;
  double t36;
  double t37;
  double t38;
  double t39;
  double t40;
  double t41;
  double t42;
  double t45_tmp;
  double t63;
  double t64;
  double t69;
  double t70;
  double t71;
  double t72;
  double t73;
  double t74;
  double t75;
  double t76;
  double t77;
  double t78;
  double t79;
  double t80;
  double t81;
  double t82;
  double t83;
  double t84;
  double t93;
  double t97;
  double t98;
  /* HESSIAN */
  /*     H = HESSIAN(IN1) */
  /*     This function was generated by the Symbolic Math Toolbox version 8.7.
   */
  /*     16-Aug-2022 19:38:46 */
  t2 = q[0] * 2.0;
  t3 = q[1] * 2.0;
  t16 = q[0] + -q[2];
  t17 = q[0] + -q[4];
  t18 = q[1] + -q[3];
  t19 = q[1] + -q[5];
  t20 = (q[2] + q[4]) + -t2;
  t21 = (q[3] + q[5]) + -t3;
  t22 = t2 + -(q[2] * 2.0);
  t23 = t3 + -(q[3] * 2.0);
  t24 = t16 * t16;
  t25 = t18 * t18;
  t28 = t16 * t17;
  t29 = t18 * t19;
  t26 = t22 * t22;
  t27 = t23 * t23;
  t34 = t28 + t29;
  t31 = 1.0 / (t24 + t25);
  t32 = t31 * t31;
  t33 = pow(t31, 3.0);
  t35 = t16 * t31;
  t36 = t17 * t31;
  t37 = t18 * t31;
  t38 = t19 * t31;
  t39 = t20 * t31;
  t40 = t21 * t31;
  t45_tmp = t24 * t31;
  t351 = t25 * t31;
  t93 = t31 * t34;
  t41 = t35 * 2.0;
  t42 = t37 * 2.0;
  t69 = t22 * t28 * t32;
  t2 = t16 * t19;
  t70 = t2 * t22 * t32;
  t3 = t17 * t18;
  t71 = t3 * t22 * t32;
  t72 = t23 * t28 * t32;
  t73 = t22 * t29 * t32;
  t74 = t2 * t23 * t32;
  t75 = t3 * t23 * t32;
  t76 = t23 * t29 * t32;
  t2 = t16 * t20;
  t77 = t2 * t22 * t32;
  t3 = t18 * t20;
  t78 = t3 * t22 * t32;
  t79 = t2 * t23 * t32;
  t2 = t16 * t21;
  t80 = t2 * t22 * t32;
  t81 = t3 * t23 * t32;
  t3 = t18 * t21;
  t82 = t3 * t22 * t32;
  t83 = t2 * t23 * t32;
  t84 = t3 * t23 * t32;
  t97 = t16 * t32 * t34 * 2.0;
  t98 = t18 * t32 * t34 * 2.0;
  t101 = t22 * t32 * t34;
  t102 = t23 * t32 * t34;
  t127 = t16 * t26 * t33 * t34 * 2.0;
  t128 = t18 * t26 * t33 * t34 * 2.0;
  t129 = t16 * t27 * t33 * t34 * 2.0;
  t130 = t18 * t27 * t33 * t34 * 2.0;
  t135 = t16 * t22 * t23 * t33 * t34 * 2.0;
  t136 = t18 * t22 * t23 * t33 * t34 * 2.0;
  t63 = (t45_tmp - 1.0) * (t45_tmp - 1.0);
  t64 = (t351 - 1.0) * (t351 - 1.0);
  t103 = t101 * 2.0;
  t104 = t102 * 2.0;
  t107 = (q[4] + -q[0]) + t34 * t35;
  t108 = (q[5] + -q[1]) + t34 * t37;
  t109 = fabs(t107);
  t110 = fabs(t108);
  /*  dirac(t107); */
  /* dirac(t108); */
  if (t107 < 0.0) {
    t107 = -1.0;
  } else if (t107 > 0.0) {
    t107 = 1.0;
  } else if (t107 == 0.0) {
    t107 = 0.0;
  }
  if (t108 < 0.0) {
    t108 = -1.0;
  } else if (t108 > 0.0) {
    t108 = 1.0;
  } else if (t108 == 0.0) {
    t108 = 0.0;
  }
  t139 = t20 * t37 + t18 * t101;
  t140 = t21 * t35 + t16 * t102;
  t156 = ((t20 * t35 + -t93) + t16 * t101) + 1.0;
  t157 = ((t21 * t37 + -t93) + t18 * t102) + 1.0;
  t121 = t107 * t107;
  t122 = t108 * t108;
  t141 = t19 * t35 + t16 * -t102;
  t142 = t18 * t36 + t18 * -t101;
  t143 = t139 * t139;
  t144 = t140 * t140;
  t152 = (t28 * t31 + t93) + t16 * -t101;
  t153 = (t29 * t31 + t93) + t18 * -t102;
  t158 = t41 * t109 * t107;
  t93 = t41 * t110 * t108;
  t162 = t156 * t156;
  t163 = t157 * t157;
  t172 = t23 * t24 * t32 * t109 * t107 * 2.0;
  t173 = t22 * t25 * t32 * t110 * t108 * 2.0;
  t2 = t16 * t18;
  t3 = t2 * t22 * t32;
  t176 = t3 * t109 * t107 * 2.0;
  t2 = t2 * t23 * t32;
  t177 = t2 * t109 * t107 * 2.0;
  t178 = t3 * t110 * t108 * 2.0;
  t29 = t2 * t110 * t108 * 2.0;
  t186_tmp = t109 * t107;
  t186 = t186_tmp * (t22 * t31 + -(t22 * t24 * t32)) * 2.0;
  t187_tmp = t110 * t108;
  t22 = t187_tmp * (t23 * t31 + -(t23 * t25 * t32)) * 2.0;
  t145 = t141 * t141;
  t146 = t142 * t142;
  t154 = t152 * t152;
  t155 = t153 * t153;
  t288 = t187_tmp * t139 * 2.0 + t186_tmp * t156 * 2.0;
  t289 = t186_tmp * t140 * 2.0 + t187_tmp * t157 * 2.0;
  t150 = 1.0 / sqrt(t109 * t109 + t110 * t110);
  t17 = (t45_tmp - 1.0) * t109;
  t250 = t18 * t93 + t17 * t107 * 2.0;
  t2 = (t351 - 1.0) * t110;
  t251 = t18 * t158 + t2 * t108 * 2.0;
  t286 = t187_tmp * t142 * 2.0 + t186_tmp * t152 * 2.0;
  t287 = t186_tmp * t141 * 2.0 + t187_tmp * t153 * 2.0;
  t151 = pow(t150, 3.0);
  t3 = t18 * t41;
  t26 = t18 * t35;
  t21 = t151 * t250;
  t330 = -(t21 * t251 / 4.0) +
         t150 *
             (((t3 * (t45_tmp - 1.0) * t121 + t3 * (t351 - 1.0) * t122) +
               t26 * (t45_tmp - 1.0) * t109 * 0.0 * 4.0) +
              t26 * (t351 - 1.0) * t110 * 0.0 * 4.0) /
             2.0;
  t16 = t151 * t251;
  t19 = (t351 - 1.0) * t122;
  t28 = t3 * t121;
  t34 = t2 * 0.0;
  t20 = t26 * t109 * 0.0;
  t351 = -(t16 * t286 / 4.0) +
         t150 *
             ((((((t42 * t109 * t107 + -t173) + -t176) + t19 * t142 * 2.0) +
                t28 * t152) +
               t34 * t142 * 4.0) +
              t20 * t152 * 4.0) /
             2.0;
  t33 = (t45_tmp - 1.0) * t121;
  t27 = t3 * t122;
  t3 = t17 * 0.0;
  t2 = t26 * t110 * 0.0;
  t18 = -(t21 * t287 / 4.0) +
        t150 *
            ((((((t93 + -t172) + -t29) + t33 * t141 * 2.0) + t27 * t153) +
              t3 * t141 * 4.0) +
             t2 * t153 * 4.0) /
            2.0;
  t173 =
      -(t16 * t288 / 4.0) +
      t150 *
          ((((((t37 * t109 * t107 * -2.0 + t173) + t176) + t19 * t139 * 2.0) +
             t28 * t156) +
            t34 * t139 * 4.0) +
           t20 * t156 * 4.0) /
          2.0;
  t23 = -(t21 * t289 / 4.0) +
        t150 *
            ((((((t35 * t110 * t108 * -2.0 + t172) + t29) + t33 * t140 * 2.0) +
               t27 * t157) +
              t3 * t140 * 4.0) +
             t2 * t157 * 4.0) /
            2.0;
  t31 = -(t21 * t286 / 4.0) +
        t150 *
            ((((((t42 * t110 * t108 + -t178) + t186) + t27 * t142) +
               t33 * t152 * 2.0) +
              t2 * t142 * 4.0) +
             t3 * t152 * 4.0) /
            2.0;
  t176 = -(t16 * t287 / 4.0) +
         t150 *
             ((((((t158 + -t177) + t22) + t28 * t141) + t19 * t153 * 2.0) +
               t20 * t141 * 4.0) +
              t34 * t153 * 4.0) /
             2.0;
  t93 = -(t21 * t288 / 4.0) +
        t150 *
            ((((((t37 * t110 * t108 * -2.0 + t178) + t27 * t139) + -t186) +
               t33 * t156 * 2.0) +
              t2 * t139 * 4.0) +
             t3 * t156 * 4.0) /
            2.0;
  t29 = -(t16 * t289 / 4.0) +
        t150 *
            ((((((t35 * t109 * t107 * -2.0 + t177) + t28 * t140) + -t22) +
               t19 * t157 * 2.0) +
              t20 * t140 * 4.0) +
             t34 * t157 * 4.0) /
            2.0;
  t2 = t121 * t141;
  t3 = t109 * 0.0 * t141;
  t20 = t151 * t286;
  t17 = t122 * t142;
  t26 = t110 * 0.0 * t142;
  t28 = -(t20 * t287 / 4.0) +
        t150 *
            (((((t2 * t152 * 2.0 + t17 * t153 * 2.0) +
                -(t186_tmp * ((((-t38 + t70) + t72) + t102) + -t135) * 2.0)) +
               -(t187_tmp * ((((-t36 + t73) + t75) + t101) + -t136) * 2.0)) +
              t3 * t152 * 4.0) +
             t26 * t153 * 4.0) /
            2.0;
  t21 = t122 * t139;
  t34 = t110 * 0.0 * t139;
  t19 = t151 * t287;
  t33 = -(t19 * t288 / 4.0) +
        t150 *
            (((((t21 * t153 * 2.0 + t2 * t156 * 2.0) +
                t187_tmp * ((((t39 + t73) + -t81) + t101) + -t136) * 2.0) +
               t34 * t153 * 4.0) +
              -(t186_tmp * ((((t38 + t79) + -t70) + -t102) + t135) * 2.0)) +
             t3 * t156 * 4.0) /
            2.0;
  t27 = t121 * t140;
  t2 = t109 * 0.0 * t140;
  t26 = -(t20 * t289 / 4.0) +
        t150 *
            (((((t27 * t152 * 2.0 + t17 * t157 * 2.0) +
                t186_tmp * ((((t40 + t72) + -t80) + t102) + -t135) * 2.0) +
               t2 * t152 * 4.0) +
              -(t187_tmp * ((((t36 + t82) + -t75) + -t101) + t136) * 2.0)) +
             t26 * t157 * 4.0) /
            2.0;
  t17 = -(t151 * t288 * t289 / 4.0) +
        t150 *
            (((((t27 * t156 * 2.0 + t21 * t157 * 2.0) +
                t186_tmp * ((((-t40 + t79) + t80) + -t102) + t135) * 2.0) +
               t187_tmp * ((((-t39 + t81) + t82) + -t101) + t136) * 2.0) +
              t2 * t156 * 4.0) +
             t34 * t157 * 4.0) /
            2.0;
  t3 =
      -(t20 * t288 / 4.0) +
      t150 *
          (((((t21 * t142 * 2.0 + t34 * t142 * 4.0) +
              t121 * t152 * t156 * 2.0) +
             -(t187_tmp * ((((t37 + t78) + -t71) + -t98) + t128) * 2.0)) +
            t109 * 0.0 * t152 * t156 * 4.0) +
           t186_tmp *
               (((((((t35 + t36) + -t39) - t69) + t77) + -t97) - t103) + t127) *
               -2.0) /
          2.0;
  t2 =
      -(t19 * t289 / 4.0) +
      t150 *
          (((((t27 * t141 * 2.0 + t2 * t141 * 4.0) + t122 * t153 * t157 * 2.0) +
             -(t186_tmp * ((((t35 + t83) + -t74) + -t97) + t129) * 2.0)) +
            t110 * 0.0 * t153 * t157 * 4.0) +
           t187_tmp *
               (((((((t37 + t38) + -t40) - t76) + t84) + -t98) - t104) + t130) *
               -2.0) /
          2.0;
  H[0] =
      t150 *
          (((((t122 * t143 * 2.0 + t121 * t162 * 2.0) -
              t186_tmp *
                  (((((t39 * 2.0 - t41) - t77 * 2.0) + t97) + t103) + -t127) *
                  2.0) +
             t110 * 0.0 * t143 * 4.0) +
            t109 * 0.0 * t162 * 4.0) +
           t187_tmp * (((t42 + t78 * 2.0) + -t98) + t128) * 2.0) /
          2.0 -
      t151 * (t288 * t288) / 4.0;
  H[1] = t17;
  H[2] = t3;
  H[3] = t33;
  H[4] = t93;
  H[5] = t173;
  H[6] = t17;
  H[7] =
      t150 *
          (((((t121 * t144 * 2.0 + t122 * t163 * 2.0) -
              t187_tmp *
                  (((((t40 * 2.0 - t42) - t84 * 2.0) + t98) + t104) + -t130) *
                  2.0) +
             t109 * 0.0 * t144 * 4.0) +
            t110 * 0.0 * t163 * 4.0) +
           t186_tmp * (((t41 + t83 * 2.0) + -t97) + t129) * 2.0) /
          2.0 -
      t151 * (t289 * t289) / 4.0;
  H[8] = t26;
  H[9] = t2;
  H[10] = t23;
  H[11] = t29;
  H[12] = t3;
  H[13] = t26;
  H[14] =
      t150 *
          (((((t122 * t146 * 2.0 + t121 * t154 * 2.0) -
              t186_tmp * ((((t36 * -2.0 + t69 * 2.0) + t97) + t103) + -t127) *
                  2.0) +
             t110 * 0.0 * t146 * 4.0) +
            t109 * 0.0 * t154 * 4.0) -
           t187_tmp * ((t71 * 2.0 + t98) - t128) * 2.0) /
          2.0 -
      t151 * (t286 * t286) / 4.0;
  H[15] = t28;
  H[16] = t31;
  H[17] = t351;
  H[18] = t33;
  H[19] = t2;
  H[20] = t28;
  H[21] =
      t150 *
          (((((t121 * t145 * 2.0 + t122 * t155 * 2.0) -
              t187_tmp * ((((t38 * -2.0 + t76 * 2.0) + t98) + t104) + -t130) *
                  2.0) +
             t109 * 0.0 * t145 * 4.0) +
            t110 * 0.0 * t155 * 4.0) -
           t186_tmp * ((t74 * 2.0 + t97) - t129) * 2.0) /
          2.0 -
      t151 * (t287 * t287) / 4.0;
  H[22] = t18;
  H[23] = t176;
  H[24] = t93;
  H[25] = t23;
  H[26] = t31;
  H[27] = t18;
  t2 = t24 * t25 * t32;
  H[28] = t150 *
              (((t63 * t121 * 2.0 + t63 * t109 * 0.0 * 4.0) + t2 * t122 * 2.0) +
               t2 * t110 * 0.0 * 4.0) /
              2.0 -
          t151 * (t250 * t250) / 4.0;
  H[29] = t330;
  H[30] = t173;
  H[31] = t29;
  H[32] = t351;
  H[33] = t176;
  H[34] = t330;
  H[35] = t150 *
              (((t64 * t122 * 2.0 + t64 * t110 * 0.0 * 4.0) + t2 * t121 * 2.0) +
               t2 * t109 * 0.0 * 4.0) /
              2.0 -
          t151 * (t251 * t251) / 4.0;
  return Map<Matrix6d>(H);
}

template class mfem::PointEdgeFrame<2>;
// template class mfem::PointEdgeFrame<3>;
