#include "materials/fung.h"
#include "simple_psd_fix.h"
#include "config.h"

using namespace Eigen;
using namespace mfem;

double Fung::energy(const Vector6d& S) {
    
  double mu = config_->mu;
  double la = config_->la;
  double S1_1 = S(0);
  double S2_2 = S(1);
  double S3_3 = S(2);
  double S2_1 = S(3);
  double S3_1 = S(4);
  double S3_2 = S(5);

  double trace = S1_1*S1_1+(S2_1*S2_1)*2.0+S2_2*S2_2+(S3_1*S3_1)*2.0+(S3_2*S3_2)*2.0+S3_3*S3_3;

  la = 1e14;
  return mu*(exp((S1_1*S1_1)*2.0+(S2_1*S2_1)*4.0+(S2_2*S2_2)*2.0+(S3_1*S3_1)*4.0+(S3_2*S3_2)*4.0+(S3_3*S3_3)*2.0)-1.0)+la*pow(S1_1*(S3_2*S3_2)+S2_2*(S3_1*S3_1)+(S2_1*S2_1)*S3_3-S1_1*S2_2*S3_3-S2_1*S3_1*S3_2*2.0+1.0,2.0);

}

Vector6d Fung::gradient(const Vector6d& S) {
  
  double mu = config_->mu;
  double la = config_->la;
  double S1_1 = S(0);
  double S2_2 = S(1);
  double S3_3 = S(2);
  double S2_1 = S(3);
  double S3_1 = S(4);
  double S3_2 = S(5);

    Vector6d gradient;
    la = 1e14;

    gradient(0) = S1_1*mu*std::exp((S1_1*S1_1)*2.0+(S2_1*S2_1)*4.0+(S2_2*S2_2)*2.0+(S3_1*S3_1)*4.0+(S3_2*S3_2)*4.0+(S3_3*S3_3)*2.0)*4.0-la*(S2_2*S3_3-S3_2*S3_2)*(S1_1*(S3_2*S3_2)+S2_2*(S3_1*S3_1)+(S2_1*S2_1)*S3_3-S1_1*S2_2*S3_3-S2_1*S3_1*S3_2*2.0+1.0)*2.0;
    gradient(1) = S2_2*mu*std::exp((S1_1*S1_1)*2.0+(S2_1*S2_1)*4.0+(S2_2*S2_2)*2.0+(S3_1*S3_1)*4.0+(S3_2*S3_2)*4.0+(S3_3*S3_3)*2.0)*4.0-la*(S1_1*S3_3-S3_1*S3_1)*(S1_1*(S3_2*S3_2)+S2_2*(S3_1*S3_1)+(S2_1*S2_1)*S3_3-S1_1*S2_2*S3_3-S2_1*S3_1*S3_2*2.0+1.0)*2.0;
    gradient(2) = S3_3*mu*std::exp((S1_1*S1_1)*2.0+(S2_1*S2_1)*4.0+(S2_2*S2_2)*2.0+(S3_1*S3_1)*4.0+(S3_2*S3_2)*4.0+(S3_3*S3_3)*2.0)*4.0-la*(S1_1*S2_2-S2_1*S2_1)*(S1_1*(S3_2*S3_2)+S2_2*(S3_1*S3_1)+(S2_1*S2_1)*S3_3-S1_1*S2_2*S3_3-S2_1*S3_1*S3_2*2.0+1.0)*2.0;
    gradient(3) = S2_1*mu*std::exp((S1_1*S1_1)*2.0+(S2_1*S2_1)*4.0+(S2_2*S2_2)*2.0+(S3_1*S3_1)*4.0+(S3_2*S3_2)*4.0+(S3_3*S3_3)*2.0)*8.0+la*(S2_1*S3_3*2.0-S3_1*S3_2*2.0)*(S1_1*(S3_2*S3_2)+S2_2*(S3_1*S3_1)+(S2_1*S2_1)*S3_3-S1_1*S2_2*S3_3-S2_1*S3_1*S3_2*2.0+1.0)*2.0;
    gradient(4) = S3_1*mu*std::exp((S1_1*S1_1)*2.0+(S2_1*S2_1)*4.0+(S2_2*S2_2)*2.0+(S3_1*S3_1)*4.0+(S3_2*S3_2)*4.0+(S3_3*S3_3)*2.0)*8.0-la*(S2_1*S3_2*2.0-S2_2*S3_1*2.0)*(S1_1*(S3_2*S3_2)+S2_2*(S3_1*S3_1)+(S2_1*S2_1)*S3_3-S1_1*S2_2*S3_3-S2_1*S3_1*S3_2*2.0+1.0)*2.0;
    gradient(5) = S3_2*mu*std::exp((S1_1*S1_1)*2.0+(S2_1*S2_1)*4.0+(S2_2*S2_2)*2.0+(S3_1*S3_1)*4.0+(S3_2*S3_2)*4.0+(S3_3*S3_3)*2.0)*8.0+la*(S1_1*S3_2*2.0-S2_1*S3_1*2.0)*(S1_1*(S3_2*S3_2)+S2_2*(S3_1*S3_1)+(S2_1*S2_1)*S3_3-S1_1*S2_2*S3_3-S2_1*S3_1*S3_2*2.0+1.0)*2.0;

    return gradient;

}

Matrix6d Fung::hessian(const Vector6d& S, bool psd_fix) {
  Matrix6d H;
  H.setZero();
   double mu = config_->mu;
  double la = config_->la;
  double S1_1 = S(0);
  double S2_2 = S(1);
  double S3_3 = S(2);
  double S2_1 = S(3);
  double S3_1 = S(4);
  double S3_2 = S(5);
       
       la = 1e14;
       H(0,0) = la*pow(S2_2*S3_3-S3_2*S3_2,2.0)*2.0+mu*std::exp((S1_1*S1_1)*2.0+(S2_1*S2_1)*4.0+(S2_2*S2_2)*2.0+(S3_1*S3_1)*4.0+(S3_2*S3_2)*4.0+(S3_3*S3_3)*2.0)*4.0+(S1_1*S1_1)*mu*std::exp((S1_1*S1_1)*2.0+(S2_1*S2_1)*4.0+(S2_2*S2_2)*2.0+(S3_1*S3_1)*4.0+(S3_2*S3_2)*4.0+(S3_3*S3_3)*2.0)*1.6E+1;
       H(0,1) = S3_3*la*(S1_1*(S3_2*S3_2)+S2_2*(S3_1*S3_1)+(S2_1*S2_1)*S3_3-S1_1*S2_2*S3_3-S2_1*S3_1*S3_2*2.0+1.0)*-2.0+la*(S1_1*S3_3-S3_1*S3_1)*(S2_2*S3_3-S3_2*S3_2)*2.0+S1_1*S2_2*mu*std::exp((S1_1*S1_1)*2.0+(S2_1*S2_1)*4.0+(S2_2*S2_2)*2.0+(S3_1*S3_1)*4.0+(S3_2*S3_2)*4.0+(S3_3*S3_3)*2.0)*1.6E+1;
       H(0,2) = S2_2*la*(S1_1*(S3_2*S3_2)+S2_2*(S3_1*S3_1)+(S2_1*S2_1)*S3_3-S1_1*S2_2*S3_3-S2_1*S3_1*S3_2*2.0+1.0)*-2.0+la*(S1_1*S2_2-S2_1*S2_1)*(S2_2*S3_3-S3_2*S3_2)*2.0+S1_1*S3_3*mu*std::exp((S1_1*S1_1)*2.0+(S2_1*S2_1)*4.0+(S2_2*S2_2)*2.0+(S3_1*S3_1)*4.0+(S3_2*S3_2)*4.0+(S3_3*S3_3)*2.0)*1.6E+1;
       H(0,3) = la*(S2_1*S3_3*2.0-S3_1*S3_2*2.0)*(S2_2*S3_3-S3_2*S3_2)*-2.0+S1_1*S2_1*mu*std::exp((S1_1*S1_1)*2.0+(S2_1*S2_1)*4.0+(S2_2*S2_2)*2.0+(S3_1*S3_1)*4.0+(S3_2*S3_2)*4.0+(S3_3*S3_3)*2.0)*3.2E+1;
       H(0,4) = la*(S2_1*S3_2*2.0-S2_2*S3_1*2.0)*(S2_2*S3_3-S3_2*S3_2)*2.0+S1_1*S3_1*mu*std::exp((S1_1*S1_1)*2.0+(S2_1*S2_1)*4.0+(S2_2*S2_2)*2.0+(S3_1*S3_1)*4.0+(S3_2*S3_2)*4.0+(S3_3*S3_3)*2.0)*3.2E+1;
       H(0,5) = S3_2*la*(S1_1*(S3_2*S3_2)+S2_2*(S3_1*S3_1)+(S2_1*S2_1)*S3_3-S1_1*S2_2*S3_3-S2_1*S3_1*S3_2*2.0+1.0)*4.0-la*(S1_1*S3_2*2.0-S2_1*S3_1*2.0)*(S2_2*S3_3-S3_2*S3_2)*2.0+S1_1*S3_2*mu*std::exp((S1_1*S1_1)*2.0+(S2_1*S2_1)*4.0+(S2_2*S2_2)*2.0+(S3_1*S3_1)*4.0+(S3_2*S3_2)*4.0+(S3_3*S3_3)*2.0)*3.2E+1;
       H(1,0) = S3_3*la*(S1_1*(S3_2*S3_2)+S2_2*(S3_1*S3_1)+(S2_1*S2_1)*S3_3-S1_1*S2_2*S3_3-S2_1*S3_1*S3_2*2.0+1.0)*-2.0+la*(S1_1*S3_3-S3_1*S3_1)*(S2_2*S3_3-S3_2*S3_2)*2.0+S1_1*S2_2*mu*std::exp((S1_1*S1_1)*2.0+(S2_1*S2_1)*4.0+(S2_2*S2_2)*2.0+(S3_1*S3_1)*4.0+(S3_2*S3_2)*4.0+(S3_3*S3_3)*2.0)*1.6E+1;
       H(1,1) = la*pow(S1_1*S3_3-S3_1*S3_1,2.0)*2.0+mu*std::exp((S1_1*S1_1)*2.0+(S2_1*S2_1)*4.0+(S2_2*S2_2)*2.0+(S3_1*S3_1)*4.0+(S3_2*S3_2)*4.0+(S3_3*S3_3)*2.0)*4.0+(S2_2*S2_2)*mu*std::exp((S1_1*S1_1)*2.0+(S2_1*S2_1)*4.0+(S2_2*S2_2)*2.0+(S3_1*S3_1)*4.0+(S3_2*S3_2)*4.0+(S3_3*S3_3)*2.0)*1.6E+1;
       H(1,2) = S1_1*la*(S1_1*(S3_2*S3_2)+S2_2*(S3_1*S3_1)+(S2_1*S2_1)*S3_3-S1_1*S2_2*S3_3-S2_1*S3_1*S3_2*2.0+1.0)*-2.0+la*(S1_1*S2_2-S2_1*S2_1)*(S1_1*S3_3-S3_1*S3_1)*2.0+S2_2*S3_3*mu*std::exp((S1_1*S1_1)*2.0+(S2_1*S2_1)*4.0+(S2_2*S2_2)*2.0+(S3_1*S3_1)*4.0+(S3_2*S3_2)*4.0+(S3_3*S3_3)*2.0)*1.6E+1;
       H(1,3) = la*(S2_1*S3_3*2.0-S3_1*S3_2*2.0)*(S1_1*S3_3-S3_1*S3_1)*-2.0+S2_1*S2_2*mu*std::exp((S1_1*S1_1)*2.0+(S2_1*S2_1)*4.0+(S2_2*S2_2)*2.0+(S3_1*S3_1)*4.0+(S3_2*S3_2)*4.0+(S3_3*S3_3)*2.0)*3.2E+1;
       H(1,4) = S3_1*la*(S1_1*(S3_2*S3_2)+S2_2*(S3_1*S3_1)+(S2_1*S2_1)*S3_3-S1_1*S2_2*S3_3-S2_1*S3_1*S3_2*2.0+1.0)*4.0+la*(S2_1*S3_2*2.0-S2_2*S3_1*2.0)*(S1_1*S3_3-S3_1*S3_1)*2.0+S2_2*S3_1*mu*std::exp((S1_1*S1_1)*2.0+(S2_1*S2_1)*4.0+(S2_2*S2_2)*2.0+(S3_1*S3_1)*4.0+(S3_2*S3_2)*4.0+(S3_3*S3_3)*2.0)*3.2E+1;
       H(1,5) = la*(S1_1*S3_2*2.0-S2_1*S3_1*2.0)*(S1_1*S3_3-S3_1*S3_1)*-2.0+S2_2*S3_2*mu*std::exp((S1_1*S1_1)*2.0+(S2_1*S2_1)*4.0+(S2_2*S2_2)*2.0+(S3_1*S3_1)*4.0+(S3_2*S3_2)*4.0+(S3_3*S3_3)*2.0)*3.2E+1;
       H(2,0) = S2_2*la*(S1_1*(S3_2*S3_2)+S2_2*(S3_1*S3_1)+(S2_1*S2_1)*S3_3-S1_1*S2_2*S3_3-S2_1*S3_1*S3_2*2.0+1.0)*-2.0+la*(S1_1*S2_2-S2_1*S2_1)*(S2_2*S3_3-S3_2*S3_2)*2.0+S1_1*S3_3*mu*std::exp((S1_1*S1_1)*2.0+(S2_1*S2_1)*4.0+(S2_2*S2_2)*2.0+(S3_1*S3_1)*4.0+(S3_2*S3_2)*4.0+(S3_3*S3_3)*2.0)*1.6E+1;
       H(2,1) = S1_1*la*(S1_1*(S3_2*S3_2)+S2_2*(S3_1*S3_1)+(S2_1*S2_1)*S3_3-S1_1*S2_2*S3_3-S2_1*S3_1*S3_2*2.0+1.0)*-2.0+la*(S1_1*S2_2-S2_1*S2_1)*(S1_1*S3_3-S3_1*S3_1)*2.0+S2_2*S3_3*mu*std::exp((S1_1*S1_1)*2.0+(S2_1*S2_1)*4.0+(S2_2*S2_2)*2.0+(S3_1*S3_1)*4.0+(S3_2*S3_2)*4.0+(S3_3*S3_3)*2.0)*1.6E+1;
       H(2,2) = la*pow(S1_1*S2_2-S2_1*S2_1,2.0)*2.0+mu*std::exp((S1_1*S1_1)*2.0+(S2_1*S2_1)*4.0+(S2_2*S2_2)*2.0+(S3_1*S3_1)*4.0+(S3_2*S3_2)*4.0+(S3_3*S3_3)*2.0)*4.0+(S3_3*S3_3)*mu*std::exp((S1_1*S1_1)*2.0+(S2_1*S2_1)*4.0+(S2_2*S2_2)*2.0+(S3_1*S3_1)*4.0+(S3_2*S3_2)*4.0+(S3_3*S3_3)*2.0)*1.6E+1;
       H(2,3) = S2_1*la*(S1_1*(S3_2*S3_2)+S2_2*(S3_1*S3_1)+(S2_1*S2_1)*S3_3-S1_1*S2_2*S3_3-S2_1*S3_1*S3_2*2.0+1.0)*4.0-la*(S2_1*S3_3*2.0-S3_1*S3_2*2.0)*(S1_1*S2_2-S2_1*S2_1)*2.0+S2_1*S3_3*mu*std::exp((S1_1*S1_1)*2.0+(S2_1*S2_1)*4.0+(S2_2*S2_2)*2.0+(S3_1*S3_1)*4.0+(S3_2*S3_2)*4.0+(S3_3*S3_3)*2.0)*3.2E+1;
       H(2,4) = la*(S2_1*S3_2*2.0-S2_2*S3_1*2.0)*(S1_1*S2_2-S2_1*S2_1)*2.0+S3_1*S3_3*mu*std::exp((S1_1*S1_1)*2.0+(S2_1*S2_1)*4.0+(S2_2*S2_2)*2.0+(S3_1*S3_1)*4.0+(S3_2*S3_2)*4.0+(S3_3*S3_3)*2.0)*3.2E+1;
       H(2,5) = la*(S1_1*S3_2*2.0-S2_1*S3_1*2.0)*(S1_1*S2_2-S2_1*S2_1)*-2.0+S3_2*S3_3*mu*std::exp((S1_1*S1_1)*2.0+(S2_1*S2_1)*4.0+(S2_2*S2_2)*2.0+(S3_1*S3_1)*4.0+(S3_2*S3_2)*4.0+(S3_3*S3_3)*2.0)*3.2E+1;
       H(3,0) = la*(S2_1*S3_3*2.0-S3_1*S3_2*2.0)*(S2_2*S3_3-S3_2*S3_2)*-2.0+S1_1*S2_1*mu*std::exp((S1_1*S1_1)*2.0+(S2_1*S2_1)*4.0+(S2_2*S2_2)*2.0+(S3_1*S3_1)*4.0+(S3_2*S3_2)*4.0+(S3_3*S3_3)*2.0)*3.2E+1;
       H(3,1) = la*(S2_1*S3_3*2.0-S3_1*S3_2*2.0)*(S1_1*S3_3-S3_1*S3_1)*-2.0+S2_1*S2_2*mu*std::exp((S1_1*S1_1)*2.0+(S2_1*S2_1)*4.0+(S2_2*S2_2)*2.0+(S3_1*S3_1)*4.0+(S3_2*S3_2)*4.0+(S3_3*S3_3)*2.0)*3.2E+1;
       H(3,2) = S2_1*la*(S1_1*(S3_2*S3_2)+S2_2*(S3_1*S3_1)+(S2_1*S2_1)*S3_3-S1_1*S2_2*S3_3-S2_1*S3_1*S3_2*2.0+1.0)*4.0-la*(S2_1*S3_3*2.0-S3_1*S3_2*2.0)*(S1_1*S2_2-S2_1*S2_1)*2.0+S2_1*S3_3*mu*std::exp((S1_1*S1_1)*2.0+(S2_1*S2_1)*4.0+(S2_2*S2_2)*2.0+(S3_1*S3_1)*4.0+(S3_2*S3_2)*4.0+(S3_3*S3_3)*2.0)*3.2E+1;
       H(3,3) = la*pow(S2_1*S3_3*2.0-S3_1*S3_2*2.0,2.0)*2.0+mu*std::exp((S1_1*S1_1)*2.0+(S2_1*S2_1)*4.0+(S2_2*S2_2)*2.0+(S3_1*S3_1)*4.0+(S3_2*S3_2)*4.0+(S3_3*S3_3)*2.0)*8.0+S3_3*la*(S1_1*(S3_2*S3_2)+S2_2*(S3_1*S3_1)+(S2_1*S2_1)*S3_3-S1_1*S2_2*S3_3-S2_1*S3_1*S3_2*2.0+1.0)*4.0+(S2_1*S2_1)*mu*std::exp((S1_1*S1_1)*2.0+(S2_1*S2_1)*4.0+(S2_2*S2_2)*2.0+(S3_1*S3_1)*4.0+(S3_2*S3_2)*4.0+(S3_3*S3_3)*2.0)*6.4E+1;
       H(3,4) = S3_2*la*(S1_1*(S3_2*S3_2)+S2_2*(S3_1*S3_1)+(S2_1*S2_1)*S3_3-S1_1*S2_2*S3_3-S2_1*S3_1*S3_2*2.0+1.0)*-4.0-la*(S2_1*S3_2*2.0-S2_2*S3_1*2.0)*(S2_1*S3_3*2.0-S3_1*S3_2*2.0)*2.0+S2_1*S3_1*mu*std::exp((S1_1*S1_1)*2.0+(S2_1*S2_1)*4.0+(S2_2*S2_2)*2.0+(S3_1*S3_1)*4.0+(S3_2*S3_2)*4.0+(S3_3*S3_3)*2.0)*6.4E+1;
       H(3,5) = S3_1*la*(S1_1*(S3_2*S3_2)+S2_2*(S3_1*S3_1)+(S2_1*S2_1)*S3_3-S1_1*S2_2*S3_3-S2_1*S3_1*S3_2*2.0+1.0)*-4.0+la*(S1_1*S3_2*2.0-S2_1*S3_1*2.0)*(S2_1*S3_3*2.0-S3_1*S3_2*2.0)*2.0+S2_1*S3_2*mu*std::exp((S1_1*S1_1)*2.0+(S2_1*S2_1)*4.0+(S2_2*S2_2)*2.0+(S3_1*S3_1)*4.0+(S3_2*S3_2)*4.0+(S3_3*S3_3)*2.0)*6.4E+1;
       H(4,0) = la*(S2_1*S3_2*2.0-S2_2*S3_1*2.0)*(S2_2*S3_3-S3_2*S3_2)*2.0+S1_1*S3_1*mu*std::exp((S1_1*S1_1)*2.0+(S2_1*S2_1)*4.0+(S2_2*S2_2)*2.0+(S3_1*S3_1)*4.0+(S3_2*S3_2)*4.0+(S3_3*S3_3)*2.0)*3.2E+1;
       H(4,1) = S3_1*la*(S1_1*(S3_2*S3_2)+S2_2*(S3_1*S3_1)+(S2_1*S2_1)*S3_3-S1_1*S2_2*S3_3-S2_1*S3_1*S3_2*2.0+1.0)*4.0+la*(S2_1*S3_2*2.0-S2_2*S3_1*2.0)*(S1_1*S3_3-S3_1*S3_1)*2.0+S2_2*S3_1*mu*std::exp((S1_1*S1_1)*2.0+(S2_1*S2_1)*4.0+(S2_2*S2_2)*2.0+(S3_1*S3_1)*4.0+(S3_2*S3_2)*4.0+(S3_3*S3_3)*2.0)*3.2E+1;
       H(4,2) = la*(S2_1*S3_2*2.0-S2_2*S3_1*2.0)*(S1_1*S2_2-S2_1*S2_1)*2.0+S3_1*S3_3*mu*std::exp((S1_1*S1_1)*2.0+(S2_1*S2_1)*4.0+(S2_2*S2_2)*2.0+(S3_1*S3_1)*4.0+(S3_2*S3_2)*4.0+(S3_3*S3_3)*2.0)*3.2E+1;
       H(4,3) = S3_2*la*(S1_1*(S3_2*S3_2)+S2_2*(S3_1*S3_1)+(S2_1*S2_1)*S3_3-S1_1*S2_2*S3_3-S2_1*S3_1*S3_2*2.0+1.0)*-4.0-la*(S2_1*S3_2*2.0-S2_2*S3_1*2.0)*(S2_1*S3_3*2.0-S3_1*S3_2*2.0)*2.0+S2_1*S3_1*mu*std::exp((S1_1*S1_1)*2.0+(S2_1*S2_1)*4.0+(S2_2*S2_2)*2.0+(S3_1*S3_1)*4.0+(S3_2*S3_2)*4.0+(S3_3*S3_3)*2.0)*6.4E+1;
       H(4,4) = la*pow(S2_1*S3_2*2.0-S2_2*S3_1*2.0,2.0)*2.0+mu*std::exp((S1_1*S1_1)*2.0+(S2_1*S2_1)*4.0+(S2_2*S2_2)*2.0+(S3_1*S3_1)*4.0+(S3_2*S3_2)*4.0+(S3_3*S3_3)*2.0)*8.0+S2_2*la*(S1_1*(S3_2*S3_2)+S2_2*(S3_1*S3_1)+(S2_1*S2_1)*S3_3-S1_1*S2_2*S3_3-S2_1*S3_1*S3_2*2.0+1.0)*4.0+(S3_1*S3_1)*mu*std::exp((S1_1*S1_1)*2.0+(S2_1*S2_1)*4.0+(S2_2*S2_2)*2.0+(S3_1*S3_1)*4.0+(S3_2*S3_2)*4.0+(S3_3*S3_3)*2.0)*6.4E+1;
       H(4,5) = S2_1*la*(S1_1*(S3_2*S3_2)+S2_2*(S3_1*S3_1)+(S2_1*S2_1)*S3_3-S1_1*S2_2*S3_3-S2_1*S3_1*S3_2*2.0+1.0)*-4.0-la*(S1_1*S3_2*2.0-S2_1*S3_1*2.0)*(S2_1*S3_2*2.0-S2_2*S3_1*2.0)*2.0+S3_1*S3_2*mu*std::exp((S1_1*S1_1)*2.0+(S2_1*S2_1)*4.0+(S2_2*S2_2)*2.0+(S3_1*S3_1)*4.0+(S3_2*S3_2)*4.0+(S3_3*S3_3)*2.0)*6.4E+1;
       H(5,0) = S3_2*la*(S1_1*(S3_2*S3_2)+S2_2*(S3_1*S3_1)+(S2_1*S2_1)*S3_3-S1_1*S2_2*S3_3-S2_1*S3_1*S3_2*2.0+1.0)*4.0-la*(S1_1*S3_2*2.0-S2_1*S3_1*2.0)*(S2_2*S3_3-S3_2*S3_2)*2.0+S1_1*S3_2*mu*std::exp((S1_1*S1_1)*2.0+(S2_1*S2_1)*4.0+(S2_2*S2_2)*2.0+(S3_1*S3_1)*4.0+(S3_2*S3_2)*4.0+(S3_3*S3_3)*2.0)*3.2E+1;
       H(5,1) = la*(S1_1*S3_2*2.0-S2_1*S3_1*2.0)*(S1_1*S3_3-S3_1*S3_1)*-2.0+S2_2*S3_2*mu*std::exp((S1_1*S1_1)*2.0+(S2_1*S2_1)*4.0+(S2_2*S2_2)*2.0+(S3_1*S3_1)*4.0+(S3_2*S3_2)*4.0+(S3_3*S3_3)*2.0)*3.2E+1;
       H(5,2) = la*(S1_1*S3_2*2.0-S2_1*S3_1*2.0)*(S1_1*S2_2-S2_1*S2_1)*-2.0+S3_2*S3_3*mu*std::exp((S1_1*S1_1)*2.0+(S2_1*S2_1)*4.0+(S2_2*S2_2)*2.0+(S3_1*S3_1)*4.0+(S3_2*S3_2)*4.0+(S3_3*S3_3)*2.0)*3.2E+1;
       H(5,3) = S3_1*la*(S1_1*(S3_2*S3_2)+S2_2*(S3_1*S3_1)+(S2_1*S2_1)*S3_3-S1_1*S2_2*S3_3-S2_1*S3_1*S3_2*2.0+1.0)*-4.0+la*(S1_1*S3_2*2.0-S2_1*S3_1*2.0)*(S2_1*S3_3*2.0-S3_1*S3_2*2.0)*2.0+S2_1*S3_2*mu*std::exp((S1_1*S1_1)*2.0+(S2_1*S2_1)*4.0+(S2_2*S2_2)*2.0+(S3_1*S3_1)*4.0+(S3_2*S3_2)*4.0+(S3_3*S3_3)*2.0)*6.4E+1;
       H(5,4) = S2_1*la*(S1_1*(S3_2*S3_2)+S2_2*(S3_1*S3_1)+(S2_1*S2_1)*S3_3-S1_1*S2_2*S3_3-S2_1*S3_1*S3_2*2.0+1.0)*-4.0-la*(S1_1*S3_2*2.0-S2_1*S3_1*2.0)*(S2_1*S3_2*2.0-S2_2*S3_1*2.0)*2.0+S3_1*S3_2*mu*std::exp((S1_1*S1_1)*2.0+(S2_1*S2_1)*4.0+(S2_2*S2_2)*2.0+(S3_1*S3_1)*4.0+(S3_2*S3_2)*4.0+(S3_3*S3_3)*2.0)*6.4E+1;
       H(5,5) = la*pow(S1_1*S3_2*2.0-S2_1*S3_1*2.0,2.0)*2.0+mu*std::exp((S1_1*S1_1)*2.0+(S2_1*S2_1)*4.0+(S2_2*S2_2)*2.0+(S3_1*S3_1)*4.0+(S3_2*S3_2)*4.0+(S3_3*S3_3)*2.0)*8.0+S1_1*la*(S1_1*(S3_2*S3_2)+S2_2*(S3_1*S3_1)+(S2_1*S2_1)*S3_3-S1_1*S2_2*S3_3-S2_1*S3_1*S3_2*2.0+1.0)*4.0+(S3_2*S3_2)*mu*std::exp((S1_1*S1_1)*2.0+(S2_1*S2_1)*4.0+(S2_2*S2_2)*2.0+(S3_1*S3_1)*4.0+(S3_2*S3_2)*4.0+(S3_3*S3_3)*2.0)*6.4E+1;

        if(psd_fix) {
         sim::simple_psd_fix(H);
        }

  return H;
}

double Fung::energy(const Eigen::Vector9d& F)  { return 0.; }
Eigen::Vector9d Fung::gradient(const Eigen::Vector9d& F) {
  return Eigen::Vector9d::Zero();
}
Eigen::Matrix9d Fung::hessian(const Eigen::Vector9d& F) {
  return Eigen::Matrix9d::Identity();
}
